<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
/*
 * The contents of this file are subject to the Mozilla Public License 
 * Version 1.1 (the "License"); you may not use this file except in 
 * compliance with the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 * 
 * Software distributed under the License is distributed on an "AS IS" 
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See 
 * the License for the specific language governing rights and limitations 
 * under the License.
 * 
 * The Original Code is the NRL Parser, released 28 April 2006, 
 * Copyright (c) Christian Nentwich. The Initial Developer of the 
 * Original Code is Christian Nentwich. Portions created by contributors 
 * identified in the NOTICES file are Copyright (c) the contributors. 
 * All Rights Reserved. 
 -->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" attributeFormDefault="unqualified" elementFormDefault="qualified">
	<xs:simpleType name="CompletionLevelEnum">
		<xs:annotation>
			<xs:documentation>The level of refinement that has gone into an operator definition. This is an enumeration</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:token">
			<xs:enumeration value="NameOnly"/>
			<xs:enumeration value="DefinedParameters"/>
			<xs:enumeration value="DefinedParameterTypes"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:complexType name="ImplementationDetail">
		<xs:annotation>
			<xs:documentation>A generic tag/value type for adding implementation details (Java mappings, etc.) to both operators and their parameters</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="label">
				<xs:annotation>
					<xs:documentation>A token that identifies the type of implementation detail. This is mapping-specific. An example value might be JAVA_CLASS, to identify a java class identified with an operator - the actual class name would be the value.</xs:documentation>
				</xs:annotation>
				<xs:simpleType>
					<xs:restriction base="xs:token">
						<xs:minLength value="1"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:element>
			<xs:element name="value" type="xs:string">
				<xs:annotation>
					<xs:documentation>The string value associated with the label.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="Operator">
		<xs:annotation>
			<xs:documentation>Definition of an extension operator, at varying levels of detail (name only, or mapping to an implementation)</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="name">
				<xs:annotation>
					<xs:documentation>The name of the operator is the only mandatory element. It defines the text that goes into square brackets in an NRL file, for example "send a message".</xs:documentation>
				</xs:annotation>
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:minLength value="1"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:element>
			<xs:element minOccurs="0" name="completionLevel" type="CompletionLevelEnum">
				<xs:annotation>
					<xs:documentation>DEPRECATED. This is now inferred from the parameters instead.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element minOccurs="0" name="documentation" type="xs:string">
				<xs:annotation>
					<xs:documentation>Textual documentation of the meaning of the operator.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element maxOccurs="unbounded" minOccurs="0" name="example" type="xs:string">
				<xs:annotation>
					<xs:documentation>Textual examples of how the operator is to be used. This is kept separate from the documentation to emphasize it.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element minOccurs="0" name="parameters" type="Parameters">
				<xs:annotation>
					<xs:documentation>The parameters the operator takes, if known.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element minOccurs="0" name="returnType">
				<xs:annotation>
					<xs:documentation>The return value type of the operator, if known.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="type" type="xs:string">
							<xs:annotation>
								<xs:documentation>The type of the return value. This has to be a fully-qualified reference to a type in one of the models included at the top of the file. Alternatively, it can be one of the following built-in NRL types: string, int, integer, double, float, date, boolean, void.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element maxOccurs="unbounded" minOccurs="0" name="implementationDetail" type="ImplementationDetail">
				<xs:annotation>
					<xs:documentation>The implementation specific mapping information for the operator, if any.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="Operators">
		<xs:annotation>
			<xs:documentation>A collection of extension operators</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element maxOccurs="unbounded" minOccurs="0" name="model" type="xs:string">
				<xs:annotation>
					<xs:documentation>Relative or absolute file names of model files that specify the types in this operator file. If the operators have no types assigned yet, this is not necessary.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element maxOccurs="unbounded" minOccurs="0" name="operator" type="Operator"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="Parameter">
		<xs:annotation>
			<xs:documentation>Parameter of an extension operator</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="name">
				<xs:annotation>
					<xs:documentation>The minimum information for a parameter is a name.</xs:documentation>
				</xs:annotation>
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:minLength value="1"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:element>
			<xs:element minOccurs="0" name="type" type="xs:string">
				<xs:annotation>
					<xs:documentation>The type of the parameter - optional. This has to be one of the "reserved" type names NRL makes available, or a fully-qualified type from a model. See "returnType" in "Operator" for more information - the "void" type must not be used here.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element minOccurs="0" name="isCollection" type="xs:boolean">
				<xs:annotation>
					<xs:documentation>An indicator specifying whether the parameter is a collection or scalar value. Absence of the element is the same as specifying 'false'</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element maxOccurs="unbounded" minOccurs="0" name="implementationDetail" type="ImplementationDetail">
				<xs:annotation>
					<xs:documentation>The implementation specific mapping information for the parameter, if any.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="Parameters">
		<xs:annotation>
			<xs:documentation>Parameters for an extension operator</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element maxOccurs="unbounded" name="parameter" type="Parameter"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="Mapping">
		<xs:annotation>
			<xs:documentation>A single type mapping. Maps a type with a given name, in a given package (or *) to an NRL type</xs:documentation>
		</xs:annotation>
		<xs:attribute name="package" type="xs:string" use="required"/>
		<xs:attribute name="name" type="xs:string" use="required"/>
		<xs:attribute name="type" type="TypeEnum" use="required"/>
	</xs:complexType>
	<xs:simpleType name="TypeEnum">
		<xs:annotation>
			<xs:documentation>Enumeration of NRL types</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:token">
			<xs:enumeration value="Boolean"/>
			<xs:enumeration value="Date"/>
			<xs:enumeration value="Element"/>
			<xs:enumeration value="DecimalNumber"/>
			<xs:enumeration value="IntegerNumber"/>
			<xs:enumeration value="String"/>
			<xs:enumeration value="Void"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:complexType name="TypeMapping">
		<xs:annotation>
			<xs:documentation>A mapping of elements with given names to internal NRL types.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element maxOccurs="unbounded" name="mapping" type="Mapping"/>
		</xs:sequence>
	</xs:complexType>
	<!---->
	<xs:element name="operators" type="Operators">
		<xs:annotation>
			<xs:documentation>The root element of an operator definition file.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="typeMapping" type="TypeMapping">
		<xs:annotation>
			<xs:documentation>The root element of a type mapping file.</xs:documentation>
		</xs:annotation>
	</xs:element>
</xs:schema>
